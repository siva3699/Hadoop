1. map(func)

###Return a new distributed dataset formed by passing each element of the source through a function func ####


Spark map Example Using Scala

// Basic map example in scala
scala> val x = sc.parallelize(List("spark", "rdd", "example",  "sample", "example"), 3)
scala> val y = x.map(x => (x, 1))
scala> y.collect
res0: Array[(String, Int)] = Array((spark,1), (rdd,1), (example,1), (sample,1), (example,1))

##with the map transformation we are mapping each element with integer 1 and creating a tuple like (word, 1) ##

// rdd y can be re writen with shorter syntax in scala as 
scala> val y = x.map((_, 1)) 
scala> y.collect
res0: Array[(String, Int)] = Array((spark,1), (rdd,1), (example,1), (sample,1), (example,1))

// Another example of making tuple with string and it's length
scala> val y = x.map(x => (x, x.length))
scala> y.collect
res0: Array[(String, Int)] = Array((spark,5), (rdd,3), (example,7), (sample,6), (example,7))



2. flatMap(func)

Similar to map, it returns a new RDD by applying  a function to each element of the RDD, but output is flattened.
Also, function in flatMap can return a list of elements (0 or more)

Let’s see this with an example.

Say you have a text file as follows

Hello World
Who are you

Now, if you run a flatMap on the textFile rdd,

words = linesRDD.flatMap(x -> List(x.split(“ “)))
And, the value in the words RDD would be, [“Hello”, “World”, “Who”, “are”, “you”]




3. filter(func)

##filter(func) returns a new data set (RDD) that's formed by selecting those elements of the source on which the function returns true.##

ex:- 

Spark filter Example Using Scala

scala> val x = sc.parallelize(1 to 10, 2)

// filter operation 
scala> val y = x.filter(e => e%2==0) 
scala> y.collect
res0: Array[Int] = Array(2, 4, 6, 8, 10)

// rdd y can be re written with shorter syntax in scala as 
scala> val y = x.filter(_ % 2 == 0)
scala> y.collect
res1: Array[Int] = Array(2, 4, 6, 8, 10)

As you can see in above example RDD X is the source RDD and contains elements 1 to 5 and has two partitions. 
Operation filter is take predicate f(x) as an argument which is some thing like x % 2 == 0
it means it will return true for even elements and false for odd elements. 
RDD Y is a resulting RDD which will have the filtered (i.e. even elements).

filter(x => x.isEmpty)

#### to filter the empty strings from RDD ###

filter(y => y.nonEmpty)

#### to filter the non empty strings from RDD ###

filter(z => z.contains("string to search"))

### to filter RDD's that contains a particular string. its simillar to like in SQL with %string% #### 

filter(w => !w.contains("string to search"))

### to filter RDD's  that does not contains a particular string. its simillar to not like in SQL with %string% #### 

