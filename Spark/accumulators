    
    val file = sc.textFile(inputFile)
    
    file.foreach(line => {             // side-effecting only
      if (line.contains("KK6JKQ")) {
        count += 1
      }
    })
    
    
    
    
    
    
    
    
    
    object ChapterSixExample {
  def main(args: Array[String]) {
    val master = args(0)
    val inputFile = args(1)
    val inputFile2 = args(2)
    val outputDir = args(3)
    val sc = new SparkContext(master, "AdvancedSparkProgramming", System.getenv("SPARK_HOME"))
    val file = sc.textFile(inputFile)
    val count = sc.accumulator(0)

    file.foreach(line => {             // side-effecting only
      if (line.contains("KK6JKQ")) {
        count += 1
      }
    })

    println("Lines with 'KK6JKQ': " + count.value)
    // Create Accumulator[Int] initialized to 0
    val errorLines = sc.accumulator(0)
    val dataLines = sc.accumulator(0)
    val validSignCount = sc.accumulator(0)
    val invalidSignCount = sc.accumulator(0)
    val unknownCountry = sc.accumulator(0)
    val resolvedCountry = sc.accumulator(0)
    val callSigns = file.flatMap(line => {
      if (line == "") {
        errorLines += 1
      } else {
        dataLines +=1
      }
      line.split(" ")
    })
    // Validate a call sign
    val callSignRegex = "\\A\\d?[a-zA-Z]{1,2}\\d{1,4}[a-zA-Z]{1,3}\\Z".r
    val validSigns = callSigns.filter{sign =>
      if ((callSignRegex findFirstIn sign).nonEmpty) {
        validSignCount += 1; true
      } else {
        invalidSignCount += 1; false
      }
    }
